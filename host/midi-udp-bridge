#!/usr/bin/env python3

import sys
import argparse
import logging
import rtmidi
import rtmidi.midiutil
from amiditools.udpmidi import MidiClient
from amiditools.proto import ProtocolError
from amiditools.portconf import MidiPortPairArray


def main_loop(client, ports):

    # setup input handler
    for port_num, midi_in in ports.get_midi_in_ports():
        def cb(msg_time, data):
            midi_in_handler(msg_time, client, port_num)
        midi_in.set_callback(cb)
        midi_in.ignore_types(sysex=False)

    # connect
    logging.info("connecting...")
    try:
        client.connect()
    except ProtocolError as e:
        logging.error("connection to server failed! %s", e)
        client.close()
        return 2
    logging.info("connected.")

    last_lost = 0
    while(True):
        try:
            # get next message
            port, data, is_sysex = client.recv()
            # some stats
            lost_pkts = client.get_lost_pkts()
            if lost_pkts != last_lost:
                logging.warning("lost packets: %d", lost_pkts)
                last_lost = lost_pkts
            # forward
            port_num = port.get_port_num()
            midi_out = ports.get_midi_out(port_num)
            if is_sysex:
                logging.debug("#%d: RX(sysex): %s", port_num, data)
                if midi_out:
                    midi_out.send_message(data)
            else:
                tup = data.get_tuple()
                logging.debug("#%d: RX(msg): %s", port_num, tup)
                if midi_out:
                    midi_out.send_message(tup)
        except KeyboardInterrupt:
            logging.info("shutting down...")
            break
        except ProtocolError as e:
            logging.error("midi udp protocol failed: %s", e)
            break

    # disconnect
    logging.info("disconnecting...")
    client.close()
    logging.info("disconnected.")


def midi_in_handler(msg_time, client, port_num):
    raw_msg, time = msg_time
    # is sysex?
    if raw_msg[0] == 0xf0:
        sysex = bytes(raw_msg)
        pkt = client.send_sysex(port_num, sysex)
        logging.debug("#%d: TX(sysex): %s -> %s", port_num, sysex, pkt)
    else:
        pkt = client.send_raw_msg(port_num, raw_msg)
        logging.debug("#%d: TX: %s -> %s", port_num, raw_msg, pkt)


def list_ports():
    rtmidi.midiutil.list_input_ports()
    rtmidi.midiutil.list_output_ports()


DESC = "transfer Midi data between Midi UDP and a local Midi port"
LOG_FORMAT = '%(asctime)-8s.%(msecs)03d   %(levelname)-7s  %(message)s'
TIME_FORMAT = "%H:%M:%S"


def main():
    # parse args
    parser = argparse.ArgumentParser(description=DESC)
    parser.add_argument('-p', '--ports', nargs='+', default=[],
                        help='Define midi port pair: midi_in:midi_out[+] '
                        'Repeat for multiple ports.')
    parser.add_argument('-l', '--list-ports', action='store_true',
                        help='List all input and output ports')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="verbose output")
    parser.add_argument('-d', '--debug', action='store_true',
                        help="enabled debug output")
    parser.add_argument('-s', '--server',
                        help="host addr of UDP server. default=localhost:6820",
                        default="localhost")
    parser.add_argument('-c', '--client',
                        help="host addr of UDP client. default=0.0.0.0:6821",
                        default="0.0.0.0")
    opts = parser.parse_args()

    # setup logging
    level = logging.WARNING
    if opts.debug:
        level = logging.DEBUG
    elif opts.verbose:
        level = logging.INFO
    logging.basicConfig(level=level, format=LOG_FORMAT, datefmt=TIME_FORMAT)

    # list ports
    if opts.list_ports:
        list_ports()
        return 0

    # midi ports
    ports = MidiPortPairArray()
    for port in opts.ports:
        ports.parse_port_pair_from_str(port)

    num_ports = ports.get_num_ports()
    if num_ports == 0:
        logging.warning("No midi ports defined! Use '-p' option. Dummy mode...")

    # open client
    client = MidiClient.parse_from_str(opts.client, opts.server)
    host_addr, peer_addr = client.get_host_and_peer_addr()
    logging.info("host_addr: %s", host_addr)
    logging.info("peer_addr: %s", peer_addr)

    # main loop
    return main_loop(client, ports)


if __name__ == '__main__':
    sys.exit(main())
